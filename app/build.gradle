plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
}
apply from: '../versions.gradle'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        //applicationId "com.jpndev.portfolio"
        applicationId "com.jpndev.portfolio.dev"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        //  buildConfigField("String","BASE_URL",MY_URL)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    /*   buildTypes {
           release {
               minifyEnabled false
               proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
           }
       }
   */
    signingConfigs {
        debug {
            storeFile file('../playerj.jks')
            storeFile file(project.property("MyApp.signing"))
            storePassword project.property("MyApp.signing.password")
            keyAlias project.property("MyApp.signing.alias")
            keyPassword project.property("MyApp.signing.alias.password")
        }

        release {
            //    storeFile file(project.property("MyApp.signing"))
            storeFile file('../playerj.jks')
            storePassword project.property("MyApp.signing.password")
            keyAlias project.property("MyApp.signing.alias")
            keyPassword project.property("MyApp.signing.alias.password")
            v2SigningEnabled false
        }
    }

    buildTypes {

        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
        }
        debug {
            signingConfig signingConfigs.debug
            //test
            //debug=true
            minifyEnabled false
            debuggable true
        }
        flavorDimensions "default"
        productFlavors {
            suresh {
                applicationIdSuffix ".alpha"
                buildConfigField "String", "BASE_URL", '"http://sarintechy.xyz/frontend/web/mock-tests/"'
                buildConfigField "String", "BASE_BACKEND_URL", '"http://sarintechy.xyz/backend/web/1/"'
                buildConfigField "String", "MID_URL", '"view?id="'
                buildConfigField "Boolean", "isShowApi", 'true'
                buildConfigField "Boolean", "isSuperUser", 'true'
                buildConfigField "Boolean", "isLive", 'false'
                buildConfigField "String", "API_NAME", '"Api : Alpha"'
            }
            beta {
                applicationIdSuffix ".testing"
                buildConfigField "String", "BASE_URL", '"http://sarintechy.xyz/frontend/web/mock-tests/"'
                buildConfigField "String", "BASE_BACKEND_URL", '"http://sarintechy.xyz/backend/web/1/"'
                buildConfigField "String", "MID_URL", '"view?id="'
                buildConfigField "Boolean", "isShowApi", 'true'
                buildConfigField "Boolean", "isSuperUser", 'true'
                buildConfigField "Boolean", "isLive", 'false'
                buildConfigField "String", "API_NAME", '"Api : Testing"'
            }
            prod {
                applicationIdSuffix ".prod"
                buildConfigField "String", "BASE_URL", '"http://sarintechy.xyz/frontend/web/mock-tests/"'
                buildConfigField "String", "BASE_BACKEND_URL", '"http://sarintechy.xyz/backend/web/1/"'
                buildConfigField "String", "MID_URL", '"view?id="'
                buildConfigField "Boolean", "isShowApi", 'true'
                buildConfigField "Boolean", "isLive", 'true'
                buildConfigField "Boolean", "isSuperUser", 'true'
                buildConfigField "String", "API_NAME", '"Api : Live with copy "'
                resValue "string", "digit_text", '""'
                resValue "string", "two_text", '""'
                resValue "string", "small_text", '" "'
                resValue "string", "medium2_text", '""'
                resValue "string", "mediuml_text", '""'
                resValue "string", "long_text", '""'
            }
            live {

                buildConfigField "String", "API_NAME", '""'
                buildConfigField "Boolean", "isShowApi", 'false'
                buildConfigField "String", "BASE_URL", '"http://sarintechy.xyz/frontend/web/mock-tests/"'
                buildConfigField "String", "BASE_BACKEND_URL", '"http://sarintechy.xyz/backend/web/1/"'
                buildConfigField "String", "MID_URL", '"view?id="'
                buildConfigField "Boolean", "isLive", 'true'
                buildConfigField "Boolean", "isShowApi", 'false'
                buildConfigField "Boolean", "isSuperUser", 'false'
                resValue "string", "digit_text", '""'
                resValue "string", "two_text", '""'
                resValue "string", "small_text", '""'
                resValue "string", "medium2_text", '""'
                resValue "string", "mediuml_text", '""'
                resValue "string", "long_text", '""'


            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'RestrictedApi'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation project(path: ':utillibrary')
    implementation 'androidx.preference:preference:1.1.1'

    //local db
    implementation("androidx.room:room-runtime:$room_version")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

    //coroutine
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'


    /*Livedata &viewmodel */
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")


    //Hlit
    implementation "com.google.dagger:hilt-android:$hlit_version"
    kapt "com.google.dagger:hilt-android-compiler:$hlit_version"

    // NavGraph
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.code.gson:gson:2.8.6'


    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    testImplementation "com.google.truth:truth:1.1"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    //Glide
    implementation "com.github.bumptech.glide:glide:$Glide_version"
    kapt "com.github.bumptech.glide:compiler:$Glide_version"

    implementation "com.github.Pradyuman7:LookAtMe:Version2.0"


    //Exo videoplayer

    // dependancy for exoplayer

    implementation "com.google.android.exoplayer:exoplayer:r2.4.0"

// for core support in exoplayer.

    implementation "com.google.android.exoplayer:exoplayer-core:r2.4.0"

// for adding dash support in our exoplayer.


    implementation "com.google.android.exoplayer:exoplayer-dash:r2.4.0"

// for adding hls support in exoplayer.

    implementation "com.google.android.exoplayer:exoplayer-hls:r2.4.0"

// for smooth streaming of video in our exoplayer.

    implementation "com.google.android.exoplayer:exoplayer-smoothstreaming:r2.4.0"

// for generating default ui of exoplayer

    implementation "com.google.android.exoplayer:exoplayer-ui:r2.4.0"


    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation("androidx.hilt:hilt-work:1.0.0")
    // When using Kotlin.
    kapt("androidx.hilt:hilt-compiler:1.0.0")
    implementation 'androidx.biometric:biometric:1.0.0-rc01'


}